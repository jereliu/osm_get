as.vector
### 2. group txt into list of named objects ===
# output: a two-tier list. First by group
# (e.g. comment, Road, Building etc),
# then by object (e.g. Building001)
group_obj_list <- order_list(txt)
### 3. Filtering using the keyword from 'filter' ===
# output: target_list (vertex marked)
# find available object types, print for user validation
group_title_exact <- group_title %>% gsub("^g ", "", .)
types <- group_title_exact %>% unique
types_idx <- grep(key, types)
types_target <- grep(key, types, value = TRUE)
if (verbose) {
cat("\n Available obj types from '", file_name, "' are:\n ")
cat(paste(1:length(types), types, "\n"))
cat(sprintf("given pattern is '%s', ", key))
}
if (length(types_idx) == 0) {
cat("nothing found :( return 1 \n")
return(1)
}
if (verbose) {
cat("below object types will be returned:\n")
cat(paste(types_idx, types_target, "\n"))
}
# obtain target objects (vertex marked)
target_list_raw <-
# first obtain index of target list
grep(key, group_title_exact) %>%
# then retrieve object
(function(idx) group_obj_list[idx])
### 4. Fix vertex ===
# input: target_list_raw (vertex marked)
# output: target_list (vertex index fixed and vertex clean)
# first obtain raw text of selected target
target_txt <- unlist(target_list_raw) %>% as.character
## 4.1 First check if vertex set includes facet set match
vertex_set <-
grep("^v[0-9]* ", target_txt, value = TRUE) %>%
# keep only "123" from "v123 a b c"
gsub("^v| [[:punct:][:digit:][:blank:]]+", "",.) %>%
as.numeric %>% unique %>% sort
facet_list <- #keep this for 4.2
grep("^f ", target_txt, value = TRUE) %>%
# keep only "a b c" from "f a b c"
gsub("^f ", "", .) %>%
strsplit(" ")
facet_set <-
facet_list %>% unlist %>%
as.numeric %>% unique %>% sort
lost_vert <-
setdiff(facet_set, vertex_set) %>% sort
## 4.2 if not, retrieve missing vertices
# output: updated target_txt
if(length(lost_vert) > 0){
if (verbose) cat("retriving extra vertices\n")
# merge missing vertices back to file, by the order of vertex
# (indexing-trick-based implementation)
# should vectorize this!!!!!
target_txt_old <- target_txt
# a. for each lost vertex, find location of next smallest vertex in old_idx
lost_vert_set <-
lost_vert %>%
paste0("^v", ., " ") %>%
paste0(collapse ="|") %>%
grep(txt, value = TRUE)
insert_loc <-
# a list,
#   name = the location to insert,
#   element = name of vertices to insert
sapply(lost_vert,
function(vert_toAdd_idx){
# if the smallest, append it to begining
if (vert_toAdd_idx < min(vertex_set))
return(0)
# find next smallest vertex
max(vertex_set[vertex_set < vert_toAdd_idx]) %>%
# find its location
paste0("^v", ., " ") %>%
grep(target_txt_old)
}
) %>%
# now collect this named vector to list
split(lost_vert_set, .)
# b. create new textline index
old_idx <- 1:length(target_txt_old)
new_idx <- numeric(0)
for (loc in names(insert_loc)){
# find content of new vertices to insert
vert_new <- insert_loc[[loc]]
# on old_idx, keep index before 'insert_loc' same,
# every index after it adds one
loc_num <- as.numeric(loc)
idx_to_update <- (loc_num + 1):length(old_idx)
old_idx[idx_to_update] <-
old_idx[idx_to_update] + length(vert_new)
new_idx <-
c(new_idx,
ifelse(loc_num == 0, 0, old_idx[loc_num]) +
(1:length(vert_new))
)
}
# quick check if what did is valid, TRUE then ok
valid <-
c(old_idx, new_idx) %>% sort %>%
equals(1:(length(old_idx)+length(new_idx))) %>%
all
if (!valid){
cat("problem with re-indexing\n")
return(5)
}
# c. create new textline set "target_txt"
target_txt <- #initiate empty vector
vector("character",
length(old_idx) + length(new_idx))
target_txt[old_idx] <- target_txt_old
target_txt[new_idx] <- lost_vert_set
# d. update vertex set
vertex_set <-
grep("^v[0-9]* ", target_txt, value = TRUE) %>%
# keep only "123" from "v123 a b c"
gsub("^v| [[:punct:][:digit:][:blank:]]+", "",.) %>%
as.numeric %>% unique %>% sort
}
# final check, see if any vextex needed by facet is
# not in vertex_set.
if (!setequal(facet_set, vertex_set)){
lost_vert <- setdiff(facet_set, vertex_set)
extra_vert <- setdiff(vertex_set, vertex_set)
if (length(lost_vert) > 0){
cat("\n these vertex are needed and can't be found in file: ",
paste(lost_vert, collapse = ", "), "\n")
return(2)
} else if (length(extra_vert) > 0){
stop("\n these vertex are not needed by facet in file: ",
paste(extra_vert, collapse = ", "), "\n")
return(3)
} else {
stop("\n facet set and vertex set are not equal, weird. \n")
return(4)
}
}
## 4.3 Now re-index (hash) vertex in facet command
# note we assume vertex_set == facet_set
fct_idx <- grep("^f ", target_txt)
vtx_idx <- grep("^v", target_txt)
hash_fun <-
as.list(1:length(vertex_set)) %>%
set_names(as.character(vertex_set))
# break, convert, reconstruct all facet commands
cat("re-indexing..")
target_txt[fct_idx] <-
sapply(facet_list,
function(vert){
# convert using minusand
vert_new <- hash_fun[vert] %>% unlist
# reconstruct
paste(c("f", vert_new), collapse = " ")
}
)
# clean up vertex reference ("v123 a b c" => "v a b c")
target_txt[vtx_idx] <-
target_txt[vtx_idx] %>%
gsub("^v[0-9]* ", "v ", .)
## 4.3 recreate group/object set list (target_list)
grp_idx <- grep("^g ", target_txt)
obj_idx <- grep("^o ", target_txt)
group_list_clean <-
# group lines into list by group
list_from_idx(grp_idx, target_txt) %>%
# set title names
set_names(c(target_txt[grp_idx]))
target_list <-
lapply(group_list_clean,
function(group_txt){
# obtain idx of object title
title_idx <- grep("^o ", group_txt)
title_list <- group_txt[title_idx] %>% gsub("^o ", "", .)
obj_list <-
# for each title, group its lines into one el in list
list_from_idx(title_idx, group_txt) %>%
# set title names
set_names(c("group", title_list))
}
)
### 5. Write file ===
## 5.1 output dir/file configuration ---
# validate output directory
if(!dir.exists(out_dir)){
dir.create(out_dir)
cat("Output directory", out_dir, "created!\n")
}
# parse file name then create output obj file
out_file_name <-
paste0(out_dir, file_name, ".obj")
file.create(out_file_name, overwrite = TRUE)
if (verbose) cat("\n Output file", out_file_name, "created,")
## 5.2 writing comment and objects in group_obj_list ---
if (verbose) cat(" writing:\n")
# first write comment (1st element of group_list)
out_file_con <- file(out_file_name, "w")
write(group_list[["comment"]], out_file_con)
if (verbose) cat("comments\n")
# now write object by group from group_obj_list
for (group_idx in 1:length(target_list)){
group_name <- names(target_list)[[group_idx]]
if (verbose) cat("===========================\n")
if (verbose) cat(group_name, "\n")
if (verbose) cat("===========================\n")
for (obj_idx in 1:length(target_list[[group_idx]])){
if (verbose) {
if (obj_idx > 1){ # if obj is not group title
obj_name <- names(target_list[[group_idx]])[obj_idx]
cat(obj_name, "\n")
}
}
# write lines
write(target_list[[group_idx]][[obj_idx]],
out_file_con)
}
if (verbose) cat("\n~~~~~~~~~~~~~~~~~~~~~~~~~\n")
}
# close and cleanup
close(out_file_con)
if (verbose) cat("File Connection closed.\n")
cat("Success!\n")
return(0)
}
txt <- readLines(paste0(in_dir, file_name, ".obj"))
group_obj_list <- order_list(txt)
group_obj_list
vert_list <- grep("^v ", txt)
vert_list
vert_list <- grep("^v ", txt, value = TRUE)
vert_list
order_list(txt)
grep("^f ", obj, value = TRUE)
obj_facet_list <-
order_list(txt)
unlist(obj_facet_list)
unlist(obj_facet_list) %>% class
obj_facet_list <-
order_list(txt) %>% # group-obj list
do.call(c, .)
length(obj_facet_list)
names(obj_facet_list)
obj_facet_list <-
# get group-obj (2-tier) list
order_list(txt) %>%
# convert to obj (1-tier) list
do.call(c, .)
obj <- obj_facet_list[[4]]
obj
grep("^f ", obj, value = TRUE) %>%
strsplit()
grep("^f ", obj, value = TRUE)
grep("^f ", obj, value = TRUE) %>%
strsplit(" ")
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
sapply(function(x) x[2:4] %>% as.numeric)
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric)
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
obj_facet_list <- # a list of vertex indices for facets
# get group-obj (2-tier) list
order_list(txt) %>%
# convert to obj (1-tier) list
do.call(c, .) %>%
# for each obj, select facet, extract numeric index
lapply(
function(obj){
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
}
)
obj_facet_list[[1]]
obj_facet_list[[2]]
obj_facet_list[[3]]
obj_facet_list[[4]]
obj_facet_list[[5]]
names(obj_facet_list)
grep("^v ", txt, value = TRUE)
vert_list <-
grep("^v ", txt, value = TRUE) %>%
lapply(function(line){
strsplit(line, " ")[[1]][-1] %>% as.numeric
}
)
vert_list
vert_list <-
grep("^v ", txt, value = TRUE) %>%
lapply(function(line){
strsplit(line, " ")[[1]][2:4] %>% as.numeric
}
)
vert_list
line <- grep("^v ", txt, value = TRUE)[1]
line
strsplit(line, " ")
strsplit(line, " ")[[1]][2:4]
strsplit(line, " ")[[1]][3:5]
strsplit(line, " ")[[1]][3:5] %>% as.numeric
vert_list <-
grep("^v ", txt, value = TRUE) %>%
lapply(function(line){
strsplit(line, " ")[[1]][3:5] %>% as.numeric
}
)
vert_list <- # a list of numeric coord (a, b, c)
grep("^v ", txt, value = TRUE) %>%
lapply(function(line){
strsplit(line, " ")[[1]][3:5] %>% as.numeric
}
)
obj_facet_list <- # a list of vertex indices for facets
# get group-obj (2-tier) list
order_list(txt) %>%
# convert to obj (1-tier) list
do.call(c, .) %>%
# for each obj, select facet, extract numeric index
lapply(
function(obj){
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
}
)
obj_facet_list
vert_idx
vert_idx <-
# the index of vertices contained by this facet
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
vert_idx
vert_list[vert_idx]
obj_facet_list <- # a list of vertex coord for facets
# get group-obj (2-tier) list
order_list(txt) %>%
# convert to obj (1-tier) list
do.call(c, .) %>%
# for each obj, select facet, extract numeric index
lapply(
function(obj){
vert_idx <-
# the index of vertices contained by this facet
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
# the numeric coord of each vertex
vert_list[vert_idx]
}
)
lapply(obj_facet_list, length)
lapply(obj_facet_list, length) %>% tab;e
lapply(obj_facet_list, length) %>% table
sapply(obj_facet_list, length) %>% table
sapply(obj_facet_list, length) %>%
which(. == 0)
sapply(obj_facet_list, length)
sapply(obj_facet_list, length) %>% equals(0)
obj_vert_list <-
sapply(obj_facet_list, length) %>%
is_greater_than(0) %>% which %>%
(function(idx) obj_facet_list[idx])
sapply(obj_vert_list, length)
sapply(obj_vert_list, length) %>% table
read_obj
source("./func/osm_helper.R")
read_obj
require(geometry)
install.packages("geometry")
require(geometry)
ps <- matrix(rnorm(30),,3)
ps
?convhulln
convhulln(ps, "FA")
vert_list[vert_idx]
vert_list[vert_idx] %>% do.call(rbind, .)
source("./func/osm_helper.R")
require(geometry)
require(dplyr)
require(magrittr)
file_name
obj_list <- read_obj(file_name, in_dir = in_dir)
obj_facet_list <-
# get group-obj (2-tier) list
order_list(txt) %>%
# convert to obj (1-tier) list
do.call(c, .) %>%
# for each obj, select facet, extract numeric index
lapply(
function(obj){
vert_idx <-
# the index of vertices contained by this facet
grep("^f ", obj, value = TRUE) %>%
strsplit(" ") %>%
lapply(function(x) x[2:4] %>% as.numeric) %>%
unlist %>% unique
# the numeric coord of each vertex
vert_list[vert_idx] %>% do.call(rbind, .)
}
)
obj_facet_list
sapply(obj_facet_list, nrow)
sapply(obj_facet_list, nrow) %>%
is_greater_than(0)
sapply(obj_facet_list, length)
sapply(obj_facet_list, length) %>%
is_greater_than(0) %>% which %>%
(function(idx) obj_facet_list[idx])
source("./func/osm_helper.R")
obj_list <- read_obj(file_name, in_dir = in_dir)
length(obj_list)
obj_list %>% lapply(nrow)
obj_list %>% lapply(nrow) %>% table
obj_list %>% sapply(nrow) %>% table
obj <- obj_list[[1]]
obj
convhulln(obj, options = "FA")
convhulln(obj, options = "FA")$vol
file_vol <-
vector("numeric", length = length(file_list))
file_vol
file_list
file_vol <-
vector("numeric", length = length(file_list)) %>%
set_names(file_list)
file_vol
cat("Calculating Volume for", file_name)
cat("Calculating Volume for", file_name, "..\n")
cat(file_name, ":creating obj..")
cat(paste0(file_name, ": creating obj.."))
file_vol <-
vector("numeric", length = length(file_list)) %>%
set_names(file_list)
for (file_name in file_list){
cat(paste0(file_name, ": creating obj.."))
obj_list <- read_obj(file_name, in_dir = in_dir)
cat("calculating volume..")
vol <-
sapply(obj_list,
function(obj)
convhulln(obj, options = "FA")$vol
) %>% sum
cat("Done!\n")
file_vol[file_name] <- vol
}
obj_list
vol <-
sapply(obj_list,
function(obj)
convhulln(obj, options = "FA")$vol
) %>% sum
for (obj in obj_list) convhulln(obj, options = "FA")$vol
obj
?tryCatch
for (obj in names(obj_list)) convhulln(obj_list[[obj]], options = "FA")$vol
obj
file_name
tryCatch(convhulln(obj, options = "FA")$vol,
error = function(e) 0
)
vol <-
sapply(obj_list,
function(obj)
tryCatch(convhulln(obj, options = "FA")$vol,
error = function(e) 0
)
) %>% sum
vol
file_vol
file_vol <-
vector("numeric", length = length(file_list)) %>%
set_names(file_list)
for (file_name in file_list){
cat(paste0(file_name, ": creating obj.."))
obj_list <- read_obj(file_name, in_dir = in_dir)
cat("calculating volume..")
vol <-
sapply(obj_list,
function(obj)
tryCatch(convhulln(obj, options = "FA")$vol,
error = function(e) 0
)
) %>% sum
cat("Done!\n")
file_vol[file_name] <- vol
}
file_vol
sort(file_vol)
file_vol %>%
(function(x) cbind(site = names(x), vol = x))
?write.csv
file_vol %>%
(function(x) cbind(site = names(x), vol = x)) %>%
write.csv(file = "site_vol.csv")
res_dir <- "./output/"
file_vol %>%
(function(x) cbind(site = names(x), vol = x)) %>%
write.csv(file = paste0(res_dir, "site_vol.csv"))
